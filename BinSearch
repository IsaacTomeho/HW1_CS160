public class BinSearch {

    // Returns index of x if it is present
    // in arr[l..r], else return -1
    public static int binarySearch(int arr[], int l, int r, int x)
    {
        // Restrict the boundary of right index
        // and the left index to prevent
        // overflow of indices
        if (r >= l && l <= arr.length - 1) {
            int mid = l + (r - l) / 2;
            // If the element is present
            // at the middle itself
            if (arr[mid] == x)
                return mid;

            // If element is smaller than mid, then it can
            // only be present in left subarray
            if (arr[mid] > x)
                return binarySearch(arr, l, mid - 1, x);

            // Else the element can only be present
            // in right subarray
            return binarySearch(arr, mid + 1, r, x);
        }
        // We reach here when element is not present in
        // array
        return -1;
    }

    public static void main(String args[]) {

        int maxExponent = 6;  // 10^6 as the largest size
        for (int exponent = 2; exponent <= maxExponent; exponent++) {
            int size = (int) Math.pow(10, exponent);
            int[] arr = new int[size];

            // Fill and sort the array
            for (int i = 0; i < size; i++) {
                arr[i] = i;
            }

            // Pick a random element to search
            int x = size / 2;

            long start = System.nanoTime();
            int result = binarySearch(arr, 0, size - 1, x);
            long end = System.nanoTime();

            long runtime = end - start;
            System.out.println("Array size: 10^" + exponent + ", Time taken: " + (double) runtime + " nanoseconds");
        }
    }
}
